Using NextJS with the app directory, everything application wise, is located in the app directory.

To change a React server component to a client component (to be able to useHooks {useState, useEffect, ect}) at the top of the page on line 1, simply put 'use client'

you cannot "embed" a server component in a client component that is fetching data, it errors out

you cannot run fetch requests directly in a client component, you have to use useEffect

the loading.jsx/tsx page is for server components when you are fetching data, it works automatically, but not for client components. However you can import it in and load it manually using
loading, setLoading useState.

client components are loaded in from the server side versus react server components where the data is just rendered.

when using a console log in RSC (React Server Components), output will be in the terminal console, not the dev tool console.

//- in app directory, create loading.jsx/tsx for built in loading please wait functionality. will display loading page while loading data.


// Advantages of RSC (React Server Components)

// - Load faster - Don't have to wait for the Javascript to load
//- Smaller client bundle size
//- SEO friendly (Search Engine Optimization)
//- Access to resources that the client can't access
//- Hide sensitive data from the client
//- More secure against XSS attacks
//- Improved developer experience

// - Just like everything else, there are also disadvantages:

//- Not as interactive
//- No component state. We can not use the 'useState' hook
//- No component lifecycle methods. We can not use the 'useEffect' hook.